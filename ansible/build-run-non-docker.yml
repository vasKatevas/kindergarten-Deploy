---
- hosts: all
  become: yes
  tasks:

    - name: build internal
      shell: ./mvnw package
      args:
        chdir: "{{workdir}}{{internal}}"



    - name: python 
      shell: " echo \"alias python=python3\" >> .bashrc"


    - name: external
      shell: |
        pip3 install -r requirements.txt
        cp kindergartent/kindergarten/.env.example kindergartent/kindergarten/.env
      args:
        chdir: "{{workdir}}{{external}}"



    - name: add ip in django ALLOWED_HOSTS
      lineinfile:
        dest: "{{workdir}}{{external}}kindergartent/kindergarten/settings.py"
        regexp: "^ALLOWED_HOSTS ="
        line: "ALLOWED_HOSTS = ['*']"
        state: present

    - name: copy nginx config
      ansible.builtin.copy:
        src: ../nginx.localhost.config
        dest: /etc/nginx/nginx.conf


    - name: make migrations
      shell: "python3 manage.py {{ item }}"
      args:
        chdir: "{{workdir}}{{external}}kindergartent"
      with_items:
        - makemigrations
        - migrate

    - name: edit database.sql part 1
      command: "sed -i /GRANT/d {{workdir}}{{internal}}database.sql "

    - name: edit database.sql part 2
      command: "sed -i /DATABASE/d {{workdir}}{{internal}}database.sql"



    - name: copy gunicorn service
      template:
        src: ../gunicorn.service.j2
        dest: /etc/systemd/system/gunicorn.service
      become: yes
      become_user: root
      notify: Restart Nginx


    - name: copy gunicorn service
      template:
        src: ../gunicorn.service.j2
        dest: /etc/systemd/system/gunicorn.service
      become: yes
      become_user: root
      notify: Restart Nginx


    - name: copy internal service
      template:
        src: ../internal.service.j2
        dest: /etc/systemd/system/internal.service
      become: yes
      become_user: root
      notify: Restart Nginx


    - name: ensure gunicorn service started
      service:
        name: gunicorn
        state: started
        enabled: yes
      become: yes

    - name: ensure internal service started
      service:
        name: internal
        state: started
        enabled: yes
      become: yes

    - name: Import database
      become: true
      mysql_db:
        state: import
        name: all
        target: "{{workdir}}{{internal}}database.sql"
      notify: Restart mysql


  handlers:
    - name: Restart Nginx
      service:
        name: nginx
        state: restarted
    - name: Restart mysql
      service:
        name: mysql
        state: restarted

